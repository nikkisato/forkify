"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = createEntryRequest;

function _utils() {
  const data = require("@parcel/utils");

  _utils = function () {
    return data;
  };

  return data;
}

function _diagnostic() {
  const data = _interopRequireDefault(require("@parcel/diagnostic"));

  _diagnostic = function () {
    return data;
  };

  return data;
}

function _path() {
  const data = _interopRequireDefault(require("path"));

  _path = function () {
    return data;
  };

  return data;
}

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

const type = 'entry_request';

function createEntryRequest(input) {
  return {
    id: `${type}:${input}`,
    type,
    run,
    input
  };
}

async function run({
  input,
  api,
  options
}) {
  let entryResolver = new EntryResolver(options);
  let result = await entryResolver.resolveEntry(input); // Connect files like package.json that affect the entry
  // resolution so we invalidate when they change.

  for (let file of result.files) {
    api.invalidateOnFileUpdate(file.filePath);
    api.invalidateOnFileDelete(file.filePath);
  } // If the entry specifier is a glob, add a glob node so
  // we invalidate when a new file matches.


  if ((0, _utils().isGlob)(input)) {
    api.invalidateOnFileCreate({
      glob: input
    });
  } // Invalidate whenever an entry is deleted.
  // If the entry was a glob, we'll re-evaluate it, and otherwise
  // a proper entry error will be thrown.


  for (let entry of result.entries) {
    api.invalidateOnFileDelete(entry.filePath);
  }

  return result;
}

class EntryResolver {
  constructor(options) {
    _defineProperty(this, "options", void 0);

    this.options = options;
  }

  async resolveEntry(entry) {
    if ((0, _utils().isGlob)(entry)) {
      let files = await (0, _utils().glob)(entry, this.options.inputFS, {
        absolute: true,
        onlyFiles: false
      });
      let results = await Promise.all(files.map(f => this.resolveEntry(_path().default.normalize(f))));
      return results.reduce((p, res) => ({
        entries: p.entries.concat(res.entries),
        files: p.files.concat(res.files)
      }), {
        entries: [],
        files: []
      });
    }

    let stat;

    try {
      stat = await this.options.inputFS.stat(entry);
    } catch (err) {
      throw new (_diagnostic().default)({
        diagnostic: {
          message: `Entry ${entry} does not exist`,
          filePath: entry
        }
      });
    }

    if (stat.isDirectory()) {
      let pkg = await this.readPackage(entry);

      if (pkg && pkg.source != null) {
        let entries = [];
        let files = [];
        let pkgSources = Array.isArray(pkg.source) ? pkg.source : [pkg.source];

        for (let pkgSource of pkgSources) {
          if (typeof pkgSource === 'string') {
            let source = _path().default.join(_path().default.dirname(pkg.filePath), pkgSource);

            try {
              stat = await this.options.inputFS.stat(source);
            } catch (err) {
              throw new (_diagnostic().default)({
                diagnostic: {
                  message: `${pkgSource} in ${_path().default.relative(this.options.inputFS.cwd(), pkg.filePath)}#source does not exist`,
                  filePath: source
                }
              });
            }

            if (!stat.isFile()) {
              throw new (_diagnostic().default)({
                diagnostic: {
                  message: `${pkgSource} in ${_path().default.relative(this.options.inputFS.cwd(), pkg.filePath)}#source is not a file`,
                  filePath: source
                }
              });
            }

            entries.push({
              filePath: source,
              packagePath: entry
            });
            files.push({
              filePath: pkg.filePath
            });
          }
        } // Only return if we found any valid entries


        if (entries.length && files.length) {
          return {
            entries,
            files
          };
        }
      }

      throw new (_diagnostic().default)({
        diagnostic: {
          message: `Could not find entry: ${entry}`,
          filePath: entry
        }
      });
    } else if (stat.isFile()) {
      let projectRoot = this.options.projectRoot;
      let packagePath = (0, _utils().isDirectoryInside)(this.options.inputFS.cwd(), projectRoot) ? this.options.inputFS.cwd() : projectRoot;
      return {
        entries: [{
          filePath: entry,
          packagePath: packagePath
        }],
        files: []
      };
    }

    throw new (_diagnostic().default)({
      diagnostic: {
        message: `Unknown entry: ${entry}`,
        filePath: entry
      }
    });
  }

  async readPackage(entry) {
    let content, pkg;

    let pkgFile = _path().default.join(entry, 'package.json');

    try {
      content = await this.options.inputFS.readFile(pkgFile, 'utf8');
    } catch (err) {
      return null;
    }

    try {
      pkg = JSON.parse(content);
    } catch (err) {
      throw new (_diagnostic().default)({
        diagnostic: {
          message: `Error parsing ${_path().default.relative(this.options.inputFS.cwd(), pkgFile)}: ${err.message}`,
          filePath: pkgFile
        }
      });
    }

    pkg.filePath = pkgFile;
    return pkg;
  }

}